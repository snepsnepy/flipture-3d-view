"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const o=require("three"),a={velocity:.1,maxStretch:.1},s=new o.Vector3,l=new o.Vector3,r=new o.Mesh(new o.SphereGeometry(.03),new o.MeshBasicMaterial({transparent:!0}));class h{constructor(t,e={},i=!1){this.options={...a,...e};const n=t.clone();t.parent.add(n),n.add(t),this.target=t,this.targetHelper=r.clone(),e.scene&&e.scene.add(this.targetHelper),this.currentHelper=r.clone(),e.scene&&e.scene.add(this.currentHelper),this.currentHelper.add(r.clone()),this.currentHelper.children[0].position.y=-.1,this._isFirstStep=!0,this.originPosition=t.position.clone(),this.originRotation=t.rotation.clone(),this.oldBoneWorldPosition=new o.Vector3,this.oldBoneWorldRotation=new o.Quaternion,this.target.getWorldPosition(this.oldBoneWorldPosition),this.target.getWorldQuaternion(this.oldBoneWorldRotation),this.restLength=this.target.parent.position.length()}reset(){this._isFirstStep=!0,this.target.position.copy(this.originPosition),this.target.rotation.copy(this.originRotation),this.target.updateMatrixWorld(!0,!1),this.target.getWorldPosition(this.oldBoneWorldPosition)}dispose(){this.reset();const t=this.target.parent,e=t.parent;e.remove(t),e.add(this.target)}update(t=null){if(!t)if(this.ms){const i=performance.now();t=i-this.ms,t/=1e3,this.ms=i}else this.ms=performance.now(),t=16/1e3;let e=1;if(t=Math.min(t,100),t>.01&&(e=2),t>=100&&(e=25),!(t<.006))for(let i=0;i<e;i++)this.step(.0085*100)}step(t){this.target.parent.updateMatrixWorld(!0,!1),this.targetHelper.position.copy(this.originPosition),this.target.parent.localToWorld(this.targetHelper.position),this._isFirstStep&&(this._isFirstStep=!1,this.oldBoneWorldPosition.copy(this.targetHelper.position)),s.copy(this.oldBoneWorldPosition).lerp(this.targetHelper.position,Math.min(this.options.velocity*t,.99999)),this.target.position.copy(s),this.target.parent.worldToLocal(this.target.position),this.oldBoneWorldPosition.copy(s);const e=this.target.parent.getWorldPosition(l);this.currentHelper.position.copy(s),this.currentHelper.updateMatrixWorld(!0,!1),this.currentHelper.lookAt(e);const i=this.target.position.clone();i.normalize(),this.target.up.set(0,1,0),this.target.quaternion.setFromUnitVectors(this.target.up,i),this.target.position.set(0,0,0),this.target.updateMatrix()}}exports.WiggleBone=h;
