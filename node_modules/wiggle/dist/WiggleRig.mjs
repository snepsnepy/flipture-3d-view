import { WiggleBone as g } from "./WiggleSpring.mjs";
import { WiggleBone as t } from "./index.mjs";
class r {
  constructor(e, { multiplier: i = 1 } = {}) {
    this.wiggleBones = [], e.bones.forEach((s) => {
      s.userData.wiggleVelocity ? this.wiggleBones.push(
        new t(s, {
          velocity: s.userData.wiggleVelocity * i
        })
      ) : s.userData.wiggleStiffness && this.wiggleBones.push(
        new g(s, {
          stiffness: s.userData.wiggleStiffness,
          damping: s.userData.wiggleDamping
        })
      );
    });
  }
  reset() {
    this.wiggleBones.forEach((e) => e.reset());
  }
  dispose() {
    this.wiggleBones.forEach((e) => e.dispose()), this.wiggleBones = [];
  }
  update(e) {
    if (!e)
      if (this.ms) {
        const i = performance.now();
        e = i - this.ms, e /= 1e3, this.ms = i;
      } else
        this.ms = performance.now(), e = 16 / 1e3;
    this.wiggleBones.forEach((i) => i.update(e));
  }
}
export {
  r as WiggleRig
};
